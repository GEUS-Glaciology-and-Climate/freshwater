
#+PROPERTY: header-args:jupyter-python :session freshwater :kernel freshwater :eval no-export
#+PROPERTY: header-args:bash :session "*freshwater-shell*" :eval no-export

* Environment Initializations
** Python
*** Packages
#+NAME: py_init
#+BEGIN_SRC jupyter-python
import numpy as np
import pandas as pd
import xarray as xr
#+END_SRC

#+RESULTS: init

*** Graphics
#+NAME: py_init_graphics
#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt

from matplotlib import rc
rc('font', size=12)
rc('text', usetex=False)
# matplotlib.pyplot.xkcd()

C_MAR = "#000000" # Belgian flag black
C_RACMO = "#af1523" # Netherland flag red

C_lightblue = np.array((166, 206, 227))/255
C_darkblue = np.array((31, 120, 180))/255
C_lightgreen = np.array((127, 223, 138))/255
C_darkgreen = np.array((51, 160, 44))/255


from adjust_spines import adjust_spines

#+END_SRC

#+RESULTS: init_graphics

*** Data Dir

+ I set =DATADIR= as a =bash= environment variable in my login scripts.
+ This is so that Python babel blocks can also easily get that property.

#+NAME: get_DATADIR
#+BEGIN_SRC jupyter-python
import os
DATADIR = os.environ['DATADIR']
#+END_SRC

Example:
#+BEGIN_SRC jupyter-python :tangle no
<<get_DATADIR>>
print(DATADIR)
#+END_SRC

** Bash
*** Init
#+NAME: bash_init
#+BEGIN_SRC bash :results verbatim
set -o nounset
set -o pipefail

# set -o errexit

### uncomment the above line when doing initial run. When rerunning and
### counting on GRASS failing w/ overwrite issues (speed increase), the
### line above must be commented

red='\033[0;31m'; orange='\033[0;33m'; green='\033[0;32m'; nc='\033[0m' # No Color
log_info() { echo -e "${green}[$(date --iso-8601=seconds)] [INFO] ${@}${nc}"; }
log_warn() { echo -e "${orange}[$(date --iso-8601=seconds)] [WARN] ${@}${nc}"; }
log_err() { echo -e "${red}[$(date --iso-8601=seconds)] [ERR] ${@}${nc}" >&2; }

trap ctrl_c INT # trap ctrl-c and call ctrl_c()
ctrl_c() { log_err "CTRL-C. Cleaning up"; }

debug() { if [[ debug:- == 1 ]]; then log_warn "debug:"; echo $@; fi; }

<<GRASS_config>>
#+END_SRC

** GRASS config
*** Config
https://grass.osgeo.org/grass74/manuals/variables.html

| GRASS_VERBOSE |                                                                |
|---------------+----------------------------------------------------------------|
|            -1 | complete silence (also errors and warnings are discarded)      |
|             0 | only errors and warnings are printed                           |
|             1 | progress and important messages are printed (percent complete) |
|             2 | all module messages are printed                                |
|             3 | additional verbose messages are printed                        |

#+NAME: GRASS_config
#+BEGIN_SRC bash :results verbatim :tangle no
export GRASS_VERBOSE=3
# export GRASS_MESSAGE_FORMAT=silent

if [ -z ${DATADIR+x} ]; then
    echo "DATADIR environment varible is unset."
    echo "Fix with: \"export DATADIR=/path/to/data\""
    exit 255
fi

set -x # print commands to STDOUT before running them
#+END_SRC





* Observations
** Obs to standard format at each obs
*** DONE W: Watson

#+NAME: load_Watson
#+BEGIN_SRC jupyter-python
<<py_init>>

w = pd.read_csv("/home/kdm/data/van_As_2018/Watson_discharge_day_v03.txt", sep="\s+",
                parse_dates=[[0,1,2]],
                index_col=0)\
      .drop(["DayOfYear", "DayOfCentury"], axis='columns')\
      .rename({"WaterFluxDiversOnly(m3/s)"         : "divers",
               "Uncertainty(m3/s)"                 : "divers_err",
               "WaterFluxDivers&Temperature(m3/s)" : "divers_t",
               "Uncertainty(m3/s).1"               : "divers_t_err",
               "WaterFluxCumulative(km3)"          : "cum",
               "Uncertainty(km3)"                  : "cum_err"}, 
              axis='columns')

obs = w[['divers_t','divers_t_err']].rename({'divers_t':'Observed',
                                             'divers_t_err':'Observed error'}, axis='columns')
obs.index.name = 'time'
obs.to_csv("./dat/runoff/obs_W.csv")
#+END_SRC

#+RESULTS: load_Watson

*** DONE Q: Qaanaaq

#+NAME: load_Qaanaaq
#+BEGIN_SRC jupyter-python :noweb yes
<<py_init>>

obs = pd.read_csv("/home/kdm/data.me/qaanaaq/discharge2017.txt", index_col=0, parse_dates=True)
tmp = pd.read_csv("/home/kdm/data.me/qaanaaq/discharge2018.txt", index_col=0, parse_dates=True)
obs = pd.concat((obs,tmp))
tmp = pd.read_csv("/home/kdm/data.me/qaanaaq/discharge2019.txt", index_col=0, parse_dates=True)
obs = pd.concat((obs,tmp))
obs = obs.resample('1D')\
         .mean()\
         .rename({'Discharge':'Observed'}, axis='columns')

obs.index.name = "time"
obs.to_csv("./dat/runoff/obs_Q.csv")
#+END_SRC

#+RESULTS: load_Qaanaaq

*** DONE L: Leverett
#+NAME: load_Leverett
#+BEGIN_SRC jupyter-python :noweb yes
<<py_init>>

root="/home/kdm/data/Tedstone_2017"
# for y in np.arange(2009,2012+1):
csv = []
for y in np.arange(2009,2012+1):
    df = pd.read_csv(root + "/leverett_Q_" + str(y) + "_UTC.csv", 
                     comment="#", index_col=0)\
        .rename({"Discharge m3 s-1": "Observed"}, axis="columns")
    df.index = datetime.datetime(y,1,1) + np.array([datetime.timedelta(_-1) for _ in df.index])
    csv.append(df)
obs = pd.concat(csv, axis='index')\
    .resample('1D').mean()
obs.index.name = "time"

obs.to_csv("./dat/runoff/obs_L.csv")
#+END_SRC

#+RESULTS: load_Leverett


*** DONE N: Narsarsuaq
#+NAME: load_narsarsuaq
#+BEGIN_SRC jupyter-python :noweb yes
<<py_init>>

<<get_DATADIR>>
root=DATADIR+"/Hawkings_2016"
print(root)

obs = pd.read_excel(root+"/NarsarsuaqDischarge2013.xlsx")\
        .rename({"Q (m3 sec-1)" : "Observed"}, axis="columns")
obs.index = datetime.datetime(2013,1,1) + np.array([datetime.timedelta(_-1) for _ in obs['DecDay']])
obs.index.name = "time"
obs.drop('DecDay', inplace=True, axis='columns')
obs = obs.resample('1D').mean().dropna()

obs.to_csv("./dat/runoff/obs_N.csv")
#+END_SRC

#+RESULTS: load_narsarsuaq
: /home/kdm/data/Hawkings_2016

*** DONE GEM

#+NAME: load_GEM
#+BEGIN_SRC jupyter-python :noweb yes
<<py_init>>

obs = pd.read_csv("/home/kdm/data/GEM/GEM.csv", parse_dates=True, index_col=0)
obs.index.name = 'time'

# name, abbreviation
nloc = [['Kobbefjord', "b"],
        ['Oriartorfik', "O"],
        ['Teqinngalip', "T"],
        ['Kingigtorssuaq', "K"],
        ['Røde_Elv', "R"],
        ['Zackenberg', "Z"]]

for nl in nloc:
    obs[nl[0]].to_csv("./dat/runoff/obs_" + nl[1] + ".csv")
#+END_SRC

#+RESULTS: load_GEM


** RCM at each obs
*** Check locations

See file:freshwater.org::#20200723T082939.595752

#+NAME: tbl_obs_xy
| b | -316602 | -2831048 |
| K | -326372 | -2829354 |
| R | -335678 | -2246371 |
| L | -226848 | -2507183 |
| Q | -560538 | -1241281 |
| N |  -18335 | -3183360 |
| T | -324548 | -2827284 |
| W | -249713 | -2510668 |
| O | -317396 | -2826710 |
| Z |  699990 | -1540459 |

#+BEGIN_SRC jupyter-python :var tbl=tbl_obs_xy
import geopandas as gpd
from shapely.geometry import Point

gdf = gpd.GeoDataFrame(tbl, columns=['abbrev','x','y'], crs="EPSG:3413").set_index("abbrev")
gdf['geometry'] = [Point(x,y) for x,y in zip(gdf['x'],gdf['y'])]
gdf.to_file("./tmp/obs.gpkg", driver="GPKG")
pd.DataFrame(gdf).drop(columns=["geometry"]).to_csv("./tmp/obs.csv", header=False)
gdf
#+END_SRC

#+RESULTS:
| abbrev |       x |        y | geometry                 |
|--------+---------+----------+--------------------------|
| b      | -316602 | -2831048 | POINT (-316602 -2831048) |
| K      | -326372 | -2829354 | POINT (-326372 -2829354) |
| R      | -335678 | -2246371 | POINT (-335678 -2246371) |
| L      | -226848 | -2507183 | POINT (-226848 -2507183) |
| Q      | -560538 | -1241281 | POINT (-560538 -1241281) |
| N      |  -18335 | -3183360 | POINT (-18335 -3183360)  |
| T      | -324548 | -2827284 | POINT (-324548 -2827284) |
| W      | -249713 | -2510668 | POINT (-249713 -2510668) |
| O      | -317396 | -2826710 | POINT (-317396 -2826710) |
| Z      |  699990 | -1540459 | POINT (699990 -1540459)  |

View

#+BEGIN_SRC bash :results verbatim
qgis ./tmp/obs.gpkg &
#+END_SRC

*** Comments

Issues
+ Leverett always in micro-basin at ice sheet edge. Suggest manually moving *or* using =upstream= to collect other nearby micro-catchments.
+ Narsarsuaq in micro-basin at glacier snout. Seems likely that =upstream= fixes this. It appears that upstream glaciers drain to land and then under this glacier.

*** Runoff at each obs

#+BEGIN_SRC screen
conda activate freshwater
for line in $(cat ./tmp/obs.csv); do
  # echo $line
  IFS="," read abb x y <<< ${line[@]}
  echo $abb $x $y
  python ./runoff.py --base ./freshwater --roi=${x},${y} -u -r > ./tmp/${abb}.csv
done
#+END_SRC

This takes an hour to run...

** TODO Bamber 2018 at each obs

** Scatter - Daily

#+BEGIN_SRC jupyter-python
import pandas as pd
import matplotlib.pyplot as plt
from adjust_spines import adjust_spines as adjust_spines

import matplotlib
from matplotlib import rc
rc('font', size=12)
rc('text', usetex=False)
# matplotlib.pyplot.xkcd()

# plt.close(1)
fig = plt.figure(1, figsize=(8,3.5)) # w,h
# get_current_fig_manager().window.move(0,0)
fig.clf()
fig.set_tight_layout(True)
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)

name = ['Watson','Leverett','Zackenberg','Narsarsuaq','Røde Elv','Kobbefjord','Teqinngalip','Oriartorfik','Kingigtorssuaq','Qaanaaq']
loc = [_[0] for _ in name]
loc[np.where(np.array(name) == 'Kobbefjord')[0][0]] = 'b'

for i,l in enumerate(loc):
    df_obs = pd.read_csv("./dat/runoff/obs_" + l + ".csv", index_col=0, parse_dates=True)
    df_obs.columns = ['obs'] if l != 'W' else ['obs','err']
    df_RCM = pd.read_csv("./dat/runoff/" + l + ".csv", index_col=0, parse_dates=True)
    df = df_obs.merge(df_RCM, left_index=True, right_index=True)

    # add upstream ice to all basins where it exists (not O or K)
    df['MAR_100'] = df['MAR_land_100'] + df['MAR_ice_100_u'] if 'MAR_ice_100_u' in df.columns else df['MAR_land_100']
    # Leverett should be just upstream ice, no land runoff
    if l == 'L': df['MAR_100'] = df['MAR_ice_100']

    # Same for RACMO
    df['RACMO_100'] = df['RACMO_land_100'] + df['RACMO_ice_100_u'] if 'RACMO_ice_100_u' in df.columns else df['RACMO_land_100']
    # Leverett should be just upstream ice, no land runoff
    if l == 'L': df['RACMO_100'] = df['RACMO_ice_100']
    
    # df = df[['obs','MAR_100','RACMO_100']]
    # df = df.fillna(0)
    df['MAR_100'] = df['MAR_100'].rolling('5D', min_periods=5).mean()#.resample('5D').mean()
    df['RACMO_100'] = df['RACMO_100'].rolling('5D', min_periods=5).mean()#.resample('5D').mean()
    
    df = df.replace(0, np.nan).dropna()
    ax1.scatter(df['obs'], df['MAR_100'], marker='.', alpha=0.1, label=name[i], edgecolor='none', clip_on=False)
    ax2.scatter(df['obs'], df['RACMO_100'], marker='.', alpha=0.1, label=l, edgecolor='none', clip_on=False)
    # if l == 'W':
    #     ax1.plot([df['obs']-df['err'], df['obs']+df['err']], 
    #             [df['MAR_100'], df['MAR_100']], color='gray', alpha=0.1, linestyle='-')
    #     ax2.plot([df['obs']-df['err'], df['obs']+df['err']], 
    #             [df['RACMO_100'], df['RACMO_100']], color='gray', alpha=0.1, linestyle='-')

coords = np.array((ax1.get_xlim(),ax1.get_ylim(),ax2.get_xlim(),ax2.get_ylim())).flatten()

for ax in [ax1,ax2]:
    ax.set_yscale('log')
    ax.set_xscale('log')
    ax.set_xlim(2E-4,1E3)
    ax.set_ylim(ax.get_xlim())
    ax.set_xlabel('Observed [m$^{3}$ s$^{-1}$]')
    
    kw = {'alpha':0.5, 'linewidth':1}
    ax.plot([0,np.max(coords)],[0,np.max(coords)], 'k-', **kw)
    ax.plot([0,np.max(coords)],[0,np.max(coords)*2], 'k--', **kw)
    ax.plot([0,np.max(coords)],[0,np.max(coords)*0.5], 'k--', **kw)

    locmaj = matplotlib.ticker.LogLocator(base=10,numticks=12) 
    # ax.xaxis.set_major_locator(locmaj)
    ax.yaxis.set_major_locator(locmaj)

    # kwargs = {'rotation':40, 'horizontalalignment':'center', 'fontsize':8, 'verticalalignment':'center'}
    # if ax == ax1:
    #     loc=4E-3
    #     ax.text(loc, (loc/2)*0.4, "RCM = 1/2 * Obs", **kwargs)
    #     # ax.text(loc, loc*1.3, "RCM = Obs", **kwargs)
    #     loc=1.5E-3
    #     ax.text(loc, (loc*2)*1.6, "RCM = 2 * Obs", **kwargs)

adjust_spines(ax1, ['left','bottom'])
adjust_spines(ax2, ['right','bottom'])


ax1.set_ylabel('MAR [m$^{^3}$ s$^{-1}$]')
ax2.set_ylabel('RACMO [m$^{^3}$ s$^{-1}$]')

leg = ax1.legend(fontsize=8, frameon=False, bbox_to_anchor=(0.8,0), loc='lower left', mode="expand")
ax2.set_zorder(-1)
for lh in leg.legendHandles: 
    lh.set_alpha(1)

plt.savefig("./fig/scatter_daily.png", bbox_inches='tight', dpi=300)
plt.savefig("./fig/scatter_daily.pdf", bbox_inches='tight', dpi=300)
plt.savefig("./fig/scatter_daily.svg", bbox_inches='tight', dpi=300)
#+END_SRC

#+RESULTS:


** NOTDONE Hexbin - Daily

#+BEGIN_SRC jupyter-python
import pandas as pd
import matplotlib.pyplot as plt
from adjust_spines import adjust_spines as adjust_spines

import matplotlib
from matplotlib import rc
rc('font', size=12)
rc('text', usetex=False)
# matplotlib.pyplot.xkcd()

# plt.close(1)
fig = plt.figure(1, figsize=(8,3.5)) # w,h
# get_current_fig_manager().window.move(0,0)
fig.clf()
fig.set_tight_layout(True)
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)

loc = ['b', 'K', 'R', 'L', 'Q', 'N', 'T', 'W', 'O', 'Z']
name = ['Kobbefjord', 'Kingigtorssuaq', 'Røde Elv', 'Leverett', 'Qaanaaq', 'Narsarsuaq', 'Teqinngalip', 'Watson', 'Oriartorfik', 'Zackenberg']

cols=[cm.Blues,cm.Reds,cm.Greens,cm.Greys,cm.Oranges,cm.Purples,cm.Blues,cm.Reds,cm.Greens,cm.Greys]

for i,l in enumerate(loc):
    df_obs = pd.read_csv("./dat/runoff/obs_" + l + ".csv", index_col=0, parse_dates=True)
    df_obs.columns = ['obs'] if l != 'W' else ['obs','err']
    df_RCM = pd.read_csv("./dat/runoff/" + l + ".csv", index_col=0, parse_dates=True)
    df = df_obs.merge(df_RCM, left_index=True, right_index=True)

    # add upstream ice to all basins where it exists (not O or K)
    df['MAR_100'] = df['MAR_land_100'] + df['MAR_ice_100_u'] if 'MAR_ice_100_u' in df.columns else df['MAR_land_100']
    # Leverett should be just upstream ice, no land runoff
    if l == 'L': df['MAR_100'] = df['MAR_ice_100_u']

    # Same for RACMO
    df['RACMO_100'] = df['RACMO_land_100'] + df['RACMO_ice_100_u'] if 'RACMO_ice_100_u' in df.columns else df['RACMO_land_100']
    # Leverett should be just upstream ice, no land runoff
    if l == 'L': df['RACMO_100'] = df['RACMO_ice_100_u']
    
    # df = df[['obs','MAR_100','RACMO_100']]
    # df = df.fillna(0)
    df['MAR_100'] = df['MAR_100'].rolling('5D', min_periods=5).mean()
    df['RACMO_100'] = df['RACMO_100'].rolling('5D', min_periods=5).mean()
    
    df = df.replace(0, np.nan).dropna()
    sc = ax1.scatter(df['obs'], df['MAR_100'], marker='.', alpha=0, edgecolor='none') # label=name[i], 
    col = sc.get_facecolors()[0]
    ax1.hexbin(df['obs'], df['MAR_100'], 
               xscale='log', yscale='log', bins='log', 
               gridsize=40,
               mincnt=1, extent=(-4,4,-4,4), 
               alpha=0.7, 
               cmap=cols[i],
               label=name[i],
               edgecolor='face')
    ax2.hexbin(df['obs'], df['RACMO_100'], 
               xscale='log', yscale='log', bins='log', 
               gridsize=40,
               mincnt=1, extent=(-4,4,-4,4), 
               alpha=0.7, 
               cmap=cols[i],
               edgecolor='face')

for ax in [ax1,ax2]:
    ax.set_yscale('log')
    ax.set_xscale('log')
    ax.set_xlim(1E-4,1E4)
    ax.set_ylim(ax.get_xlim())
    ax.set_xlabel('Observed [m$^{3}$ s$^{-1}$]')

    ax.plot([0,np.max(coords)],[0,np.max(coords)], 'k-', linewidth=0.33)
    ax.plot([0,np.max(coords)],[0,np.max(coords)*2], 'k-', linewidth=0.33)
    ax.plot([0,np.max(coords)],[0,np.max(coords)*0.5], 'k-', linewidth=0.33)
    kwargs = {'rotation':40, 'horizontalalignment':'center', 'fontsize':8, 'verticalalignment':'center'}
    
    locmaj = matplotlib.ticker.LogLocator(base=10,numticks=12) 
    # ax.xaxis.set_major_locator(locmaj)
    ax.yaxis.set_major_locator(locmaj)

    if ax == ax1:
        loc=4E-3
        ax.text(loc, (loc/2)*0.4, "RCM = 1/2 * Obs", **kwargs)
        # ax.text(loc, loc*1.3, "RCM = Obs", **kwargs)
        loc=1.5E-3
        ax.text(loc, (loc*2)*1.6, "RCM = 2 * Obs", **kwargs)

adjust_spines(ax1, ['left','bottom'])
adjust_spines(ax2, ['right','bottom'])


ax1.set_ylabel('MAR [m$^{^3}$ s$^{-1}$]')
ax2.set_ylabel('RACMO [m$^{^3}$ s$^{-1}$]')

leg = ax1.legend(fontsize=8, frameon=False, bbox_to_anchor=(0.8,0), loc='lower left', mode="expand")
ax2.set_zorder(-1)
for lh in leg.legendHandles: 
    lh.set_alpha(1)

# plt.savefig("./fig/scatter_daily.png", bbox_inches='tight', dpi=300)
# plt.savefig("./fig/scatter_daily.pdf", bbox_inches='tight', dpi=300)
# plt.savefig("./fig/scatter_daily.svg", bbox_inches='tight', dpi=300)
#+END_SRC



** Scatter - Yearly sum

#+BEGIN_SRC jupyter-python
import pandas as pd
import matplotlib.pyplot as plt
from adjust_spines import adjust_spines as adjust_spines

import matplotlib
from matplotlib import rc
rc('font', size=12)
rc('text', usetex=False)
# matplotlib.pyplot.xkcd()

# plt.close(1)
fig = plt.figure(1, figsize=(8,3.5)) # w,h
# get_current_fig_manager().window.move(0,0)
fig.clf()
fig.set_tight_layout(True)
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)

name = ['Watson','Leverett','Zackenberg','Narsarsuaq','Røde Elv','Kobbefjord','Teqinngalip','Oriartorfik','Kingigtorssuaq','Qaanaaq']
loc = [_[0] for _ in name]
loc[np.where(np.array(name) == 'Kobbefjord')[0][0]] = 'b'

for i,l in enumerate(loc):
    df_obs = pd.read_csv("./dat/runoff/obs_" + l + ".csv", index_col=0, parse_dates=True)
    df_obs.columns = ['obs'] if l != 'W' else ['obs','err']
    df_RCM = pd.read_csv("./dat/runoff/" + l + ".csv", index_col=0, parse_dates=True)
    df = df_obs.merge(df_RCM, left_index=True, right_index=True)

    # add upstream ice to all basins where it exists (not O or K)
    df['MAR_100'] = df['MAR_land_100'] + df['MAR_ice_100_u'] if 'MAR_ice_100_u' in df.columns else df['MAR_land_100']
    # Leverett should be just upstream ice, no land runoff
    if l == 'L': df['MAR_100'] = df['MAR_ice_100']

    # Same for RACMO
    df['RACMO_100'] = df['RACMO_land_100'] + df['RACMO_ice_100_u'] if 'RACMO_ice_100_u' in df.columns else df['RACMO_land_100']
    # Leverett should be just upstream ice, no land runoff
    if l == 'L': df['RACMO_100'] = df['RACMO_ice_100']
    
    # df = df[['obs','MAR_100','RACMO_100']]
    
    df = df.replace(0, np.nan).dropna()

    df = df.resample('A').sum()
    ax1.scatter(df['obs'], df['MAR_100'], marker='$\mathrm{'+l+'}$', alpha=0.9, label=name[i], clip_on=False, zorder=99)
    ax2.scatter(df['obs'], df['RACMO_100'], marker='$\mathrm{'+l+'}$', alpha=0.9, clip_on=False, zorder=99)
    # if l == 'W':
    #     ax1.plot([df['obs']-df['err'], df['obs']+df['err']], 
    #             [df['MAR_100'], df['MAR_100']], color='k', alpha=0.9, linestyle='-')
    #     ax2.plot([df['obs']-df['err'], df['obs']+df['err']], 
    #             [df['RACMO_100'], df['RACMO_100']], color='k', alpha=0.9, linestyle='-')

for ax in [ax1,ax2]:
    ax.set_yscale('log')
    ax.set_xscale('log')
    ax.set_xlim(1E1,1E5)
    ax.set_ylim(ax.get_xlim())
    ax.set_xlabel('Observed [m$^{3}$]')

    coords = ax.get_xlim()
    kw = {'alpha':0.5, 'linewidth':1}
    ax.plot([0,np.max(coords)],[0,np.max(coords)], 'k-', **kw)
    ax.plot([0,np.max(coords)],[0,np.max(coords)*2], 'k--', **kw)
    ax.plot([0,np.max(coords)],[0,np.max(coords)*0.5], 'k--', **kw)

    locmaj = matplotlib.ticker.LogLocator(base=10,numticks=12) 
    ax.xaxis.set_major_locator(locmaj)
    ax.yaxis.set_major_locator(locmaj)

    # kwargs = {'rotation':40, 'horizontalalignment':'center', 'fontsize':8, 'verticalalignment':'center'}
    # if ax == ax1:
    #     loc=1200
    #     ax.text(loc, (loc/2)*0.6, "RCM = 1/2 * Obs", **kwargs)
    #     # ax.text(loc, loc*1.3, "RCM = Obs", **kwargs)
    #     loc=100
    #     ax.text(loc, (loc*2)*1.4, "RCM = 2 * Obs", **kwargs)

adjust_spines(ax1, ['left','bottom'])
adjust_spines(ax2, ['right','bottom'])


ax1.set_ylabel('MAR [m$^{^3}$]')
ax2.set_ylabel('RACMO [m$^{^3}$]')

leg = ax1.legend(fontsize=8, frameon=False, bbox_to_anchor=(0.9,0.1), loc='lower left', mode="expand")
ax2.set_zorder(-2)
for lh in leg.legendHandles: 
    lh.set_alpha(1)

for i,l in enumerate(leg.texts):
    l.set_y(-1.5)
#     l.set_x(-i*18+20)
# for i,l in enumerate(leg.legendHandles):
#     l.set_offsets([[-i*12.5+10+20,4],[-i*12.5+10+20,4]])

plt.savefig("./fig/scatter_yearsum.png", bbox_inches='tight', dpi=300)
# plt.savefig("./fig/scatter_yearsum.pdf", bbox_inches='tight', dpi=300)
# plt.savefig("./fig/scatter_yearsum.svg", bbox_inches='tight', dpi=300)
#+END_SRC

#+RESULTS:


* NOTDONE Bamber 2018

#+BEGIN_SRC bash :results verbatim
grass -c ./G/Bamber_2018
# r.external input=NetCDF:"${DATADIR}/Bamber_2018/FWF17.v3_a.nc:lon" output=lon
# parallel --bar 'r.external -o source="netCDF:./tmp/MAR_runoff_ice_2000.nc:runoff" output=ice.{} band={}' ::: ${seq}

g.region res=5000 -pa
g.region w=-1777980 n=-67308 e=$(( -1777980 + 5000*752 )) s=$(( -67308 - 5000*785 )) -pa  # from ncdump global attributes

r.external -o source="netCDF:${DATADIR}/Bamber_2018/FWF17.v3_a.nc:lon" output=lon
r.external -o source="netCDF:${DATADIR}/Bamber_2018/FWF17.v3_a.nc:lat" output=lat
# r.external -o source="netCDF:${DATADIR}/Bamber_2018/FWF17.v3_a.nc:runoff_tundra" output=runoff_tundra # band...
r.external -o source="netCDF:${DATADIR}/Bamber_2018/FWF17.v3_a.nc:LSMGr" output=LSMGr


#+END_SRC

* Figures
** DONE Scatter plot of RCM vs observed

Broken axes plot https://github.com/bendichter/brokenaxes

#+BEGIN_SRC jupyter-python
<<load_RCM_obs>>

<<py_init_graphics>>

# plt.close(1)
fig = plt.figure(1, figsize=(9,4)) # w,h
fig.clf()
fig.set_tight_layout(True)
axL = fig.add_subplot(121)
axR = fig.add_subplot(122)

kwargs = {'fontsize' : 9,
          'horizontalalignment' : 'center', 
          'verticalalignment' : 'center'}

for site in [#'Qaanaaq',
        'Watson',
        'Kingigtorssuaq','Kobbefjord',
        'Oriartorfik','Røde Elv','Teqinngalip','Zackenberg','Leverett']:
    label = site[0]
    if site == "Kobbefjord": label='B'

    df = RCM_obs.resample('A').sum()[site].replace(0, np.nan).dropna()
    axL.scatter(df['Observed'], df['MAR'], alpha = 0) # don't display, just set axis range
    axR.scatter(df['Observed'], df['MAR'], alpha = 0)
    for x,y in zip(df['Observed'], df['MAR']):
        axL.text(x,y, label, color = C_MAR, **kwargs)
        axR.text(x,y, label, color = C_MAR, **kwargs)
    for x,y in zip(df['Observed'], df['RACMO']):
        axL.text(x,y, label, color = C_RACMO, **kwargs)
        axR.text(x,y, label, color = C_RACMO, **kwargs)

axR.set_yscale('log')
axR.set_xscale('log')

for a in [axL,axR]:
    coords = np.array((a.get_xlim(),a.get_ylim())).flatten()
    a.set_xlim(np.min(coords),np.max(coords))
    a.set_ylim(a.get_xlim())
    a.plot([0,np.max(coords)],[0,np.max(coords)], 'k-', linewidth=0.33)
    a.plot([0,np.max(coords)],[0,np.max(coords)*2], 'k-', linewidth=0.33)
    a.plot([0,np.max(coords)],[0,np.max(coords)*0.5], 'k-', linewidth=0.33)
    
    a.set_xlabel('Observed [m$^{3}$ yr$^{-1}$]')
    a.set_ylabel('RCM [m$^{^3}$ yr$^{-1}$]')

import matplotlib.patches as mpatches
patch_MAR = mpatches.Patch(color=C_MAR, label='MAR')
patch_RACMO = mpatches.Patch(color=C_RACMO, label='RACMO')
plt.legend(handles=[patch_MAR,patch_RACMO])

adjust_spines(axL, ['left','bottom'])
adjust_spines(axR, ['right','bottom'])
_ = plt.setp(axL.get_xticklabels(), rotation=15)

# plt.savefig('.png', transparent=True, bbox_inches='tight', dpi=300)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example

KeyErrorTraceback (most recent call last)
~/local/anaconda/envs/sci/lib/python3.6/site-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   2896             try:
-> 2897                 return self._engine.get_loc(key)
   2898             except KeyError:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 'RACMO'

During handling of the above exception, another exception occurred:

KeyErrorTraceback (most recent call last)
<ipython-input-30-0271442be3fd> in <module>
    301         axL.text(x,y, label, color = C_MAR, **kwargs)
    302         axR.text(x,y, label, color = C_MAR, **kwargs)
--> 303     for x,y in zip(df['Observed'], df['RACMO']):
    304         axL.text(x,y, label, color = C_RACMO, **kwargs)
    305         axR.text(x,y, label, color = C_RACMO, **kwargs)

~/local/anaconda/envs/sci/lib/python3.6/site-packages/pandas/core/frame.py in __getitem__(self, key)
   2993             if self.columns.nlevels > 1:
   2994                 return self._getitem_multilevel(key)
-> 2995             indexer = self.columns.get_loc(key)
   2996             if is_integer(indexer):
   2997                 indexer = [indexer]

~/local/anaconda/envs/sci/lib/python3.6/site-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   2897                 return self._engine.get_loc(key)
   2898             except KeyError:
-> 2899                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   2900         indexer = self.get_indexer([key], method=method, tolerance=tolerance)
   2901         if indexer.ndim > 1 or indexer.size > 1:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 'RACMO'
#+end_example
:END:

** DONE Scatter plot of RCM vs observed

#+BEGIN_SRC jupyter-python
<<load_RCM_obs>>

<<py_init_graphics>>

# plt.close(1)
fig = plt.figure(1, figsize=(9,4)) # w,h
fig.clf()
fig.set_tight_layout(True)
axL = fig.add_subplot(121)
axR = fig.add_subplot(122)

from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes
axins = zoomed_inset_axes(axL, 50, loc=2) # zoom-factor: 2.5, location: upper-left
axins.set_xlim([0,1000]); axins.set_ylim(axins.get_xlim())

kwargs = {'alpha' : 0.5}

for site in [#'Qaanaaq',
        'Watson','Kingigtorssuaq','Kobbefjord',
        'Oriartorfik','Røde Elv','Teqinngalip','Zackenberg','Leverett']:
    label = site[0]
    if site == "Kobbefjord": label='B'

    df = RCM_obs.resample('A').sum()[site].replace(0, np.nan).dropna()
    axL.scatter(df['Observed'], df['MAR'], marker='$\mathrm{'+label+'}$', color=C_MAR, **kwargs)
    axins.scatter(df['Observed'], df['MAR'], marker='$\mathrm{'+label+'}$', color=C_MAR, **kwargs)
    axR.scatter(df['Observed'], df['MAR'], marker='$\mathrm{'+label+'}$', color=C_MAR, **kwargs)

    # axL.scatter(df['Observed'], df['RACMO'], marker='$\mathrm{'+label+'}$', color=C_RACMO, **kwargs)
    # axins.scatter(df['Observed'], df['RACMO'], marker='$\mathrm{'+label+'}$', color=C_RACMO, **kwargs)
    # axR.scatter(df['Observed'], df['RACMO'], marker='$\mathrm{'+label+'}$', color=C_RACMO, **kwargs)

axR.set_yscale('log')
axR.set_xscale('log')

for a in [axL,axR]:
    coords = np.array((a.get_xlim(),a.get_ylim())).flatten()
    a.set_xlim(np.min(coords)-150,np.max(coords))
    a.set_ylim(a.get_xlim())
    a.set_xlabel('Observed [m$^{3}$ yr$^{-1}$]')
    a.set_ylabel('RCM [m$^{^3}$ yr$^{-1}$]')

for a in [axL,axR, axins]:
    a.plot([0,np.max(coords)],[0,np.max(coords)], 'k-', linewidth=0.33)
    a.plot([0,np.max(coords)],[0,np.max(coords)*2], 'k-', linewidth=0.33)
    a.plot([0,np.max(coords)],[0,np.max(coords)*0.5], 'k-', linewidth=0.33)
   
import matplotlib.patches as mpatches
patch_MAR = mpatches.Patch(color=C_MAR, label='MAR')
patch_RACMO = mpatches.Patch(color=C_RACMO, label='RACMO')
#axR.legend(handles=[patch_MAR,patch_RACMO])
# axR.legend(handles=[patch_MAR])

adjust_spines(axL, ['left','bottom'])
adjust_spines(axR, ['right','bottom'])
plt.setp(axL.get_xticklabels(), rotation=15)

# axins.set_xlim([0,1000]); axins.set_ylim(axins.get_xlim())
plt.yticks(visible=False)
plt.xticks(visible=False)

"" # quiet output
# from mpl_toolkits.axes_grid1.inset_locator import mark_inset
# mark_inset(axL, axins, loc1=2, loc2=4, fc="none", ec="0.5")

# plt.savefig('.png', transparent=True, bbox_inches='tight', dpi=300)
#+END_SRC

#+RESULTS:


** DONE [#A] Scatter plot of RCM vs observed

#+BEGIN_SRC jupyter-python
<<load_RCM_obs>>

<<py_init_graphics>>

# plt.close(1)
fig = plt.figure(1, figsize=(5,4)) # w,h
fig.clf()
fig.set_tight_layout(True)
ax = fig.add_subplot(111)

kwargs = {'alpha' : 0.5}

for site in [# 'Qaanaaq',
        'Watson',
        'Kingigtorssuaq',
        'Kobbefjord',
        'Oriartorfik',
        'Røde Elv',
        'Teqinngalip',
        'Zackenberg',
        'Leverett']:
    label = site[0]
    if site == "Kobbefjord": label='B'

    df = RCM_obs.resample('A').sum()[site][['Observed','MAR']].replace(0, np.nan).dropna()
    ax.scatter(df['Observed'], df['MAR'], marker='$\mathrm{'+label+'}$', color=C_MAR, **kwargs)

ax.set_yscale('log')
ax.set_xscale('log')

coords = np.array((ax.get_xlim(),ax.get_ylim())).flatten()
ax.set_xlim(np.min(coords)-1,np.max(coords))
ax.set_ylim(ax.get_xlim())
ax.set_xlabel('Observed [m$^{3}$ yr$^{-1}$]')
ax.set_ylabel('RCM [m$^{^3}$ yr$^{-1}$]')

ax.plot([0,np.max(coords)],[0,np.max(coords)], 'k-', linewidth=0.33)
ax.plot([0,np.max(coords)],[0,np.max(coords)*2], 'k-', linewidth=0.33)
ax.plot([0,np.max(coords)],[0,np.max(coords)*0.5], 'k-', linewidth=0.33)
kwargs = {'rotation':40, 'horizontalalignment':'center', 'fontsize':8, 'verticalalignment':'center'}

loc=0.6E2
ax.text(loc, (loc/2)*1.3, "y=0.5x", **kwargs)
ax.text(loc, loc*1.3, "y=x", **kwargs)
ax.text(loc, (loc*2)*1.3, "$y=2x$", **kwargs)

# import matplotlib.patches as mpatches
# patch_MAR = mpatches.Patch(color=C_MAR, label='MAR')
# patch_RACMO = mpatches.Patch(color=C_RACMO, label='RACMO')
# #axR.legend(handles=[patch_MAR,patch_RACMO])
# # axR.legend(handles=[patch_MAR])

adjust_spines(ax, ['left','bottom'])
# adjust_spines(axR, ['right','bottom'])
# plt.setp(axL.get_xticklabels(), rotation=15)

# plt.savefig('.png', transparent=True, bbox_inches='tight', dpi=300)
#+END_SRC

#+RESULTS:


** FAIL Scatter plot of RCM vs observed

#+BEGIN_SRC jupyter-python
<<load_RCM_obs>>

<<py_init_graphics>>

# plt.close(1)
fig = plt.figure(1, figsize=(9,4)) # w,h
fig.clf()
fig.set_tight_layout(True)
axL = fig.add_subplot(121)
axR = fig.add_subplot(122)

kwargs = {'fontsize' : 9,
          'horizontalalignment' : 'center', 
          'verticalalignment' : 'center'}

for site in [#'Qaanaaq',
             'Watson','Kingigtorssuaq','Kobbefjord',
             'Oriartorfik','Røde Elv','Teqinngalip','Zackenberg','Leverett']:
    label = site[0]
    if site == "Kobbefjord": label='B'

    df = RCM_obs.resample('A').sum()[site].replace(0, np.nan).dropna()
    df = df.apply(lambda c:  c/df['Observed'].values)
    axL.scatter(df['Observed'], df['MAR'], alpha = 0) # don't display, just set axis range
    axR.scatter(df['Observed'], df['MAR'], alpha = 0)
    for x,y in zip(df['Observed'], df['MAR']):
        axL.text(x,y, label, color = C_MAR, **kwargs)
        axR.text(x,y, label, color = C_MAR, **kwargs)
    for x,y in zip(df['Observed'], df['RACMO']):
        axL.text(x,y, label, color = C_RACMO, **kwargs)
        axR.text(x,y, label, color = C_RACMO, **kwargs)

axR.set_yscale('log')
axR.set_xscale('log')

for a in [axL,axR]:
    coords = np.array((a.get_xlim(),a.get_ylim())).flatten()
    a.set_xlim(np.min(coords),np.max(coords))
    a.set_ylim(a.get_xlim())
    a.plot([0,np.max(coords)],[0,np.max(coords)], 'k-', linewidth=0.33)
    
    a.set_xlabel('Observed [m$^{3}$ yr$^{-1}$]')
    a.set_ylabel('RCM [m$^{^3}$ yr$^{-1}$]')

# import matplotlib.patches as mpatches
# patch_MAR = mpatches.Patch(color=C_MAR, label='MAR')
# patch_RACMO = mpatches.Patch(color=C_RACMO, label='RACMO')
# plt.legend(handles=[patch_MAR,patch_RACMO])

# adjust_spines(axL, ['left','bottom'])
# adjust_spines(axR, ['right','bottom'])

# axL.set_xlim([0,2]); axL.set_ylim(axL.get_xlim())

# rot = plt.xticks(rotation=15)

# plt.savefig('.png', transparent=True, bbox_inches='tight', dpi=300)
#+END_SRC

#+RESULTS:


